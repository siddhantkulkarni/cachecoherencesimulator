/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cachecoherencesimulator;

import cachecoherencesimulator.protocols.ProtocolEnum;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Team 4 - Siddhant Kulkarni, Ritesh Sangurmath, Ranjan Yadav
 */
class ThreadRunner extends Thread {

    String scenario;

    public ThreadRunner(String temp) {
        this.scenario = temp;
    }

    public void run() {
        try {
            if (scenario.trim().length() != 0) {
                Exec.executeScenario(scenario);// use the generated sequence and starts the execution
            }
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        }

    }
}

public class SimulatorWindow extends javax.swing.JFrame {

    /**
     * Creates new form SimulatorWindow
     */
    public static EvalParam evaluator;

    public static void updateEvalParamBox() { // print the actual output at the "experimental result" block of the simulator
        String eval = "";
        eval += "Cache Misses:\n";
        eval += "\tRead Misses:\t" + evaluator.cacheReadMisses;
        eval += "\n\tWrite Misses:\t" + evaluator.cacheWriteMisses;
        eval += "\nCoherence Misses:";
        eval += "\n\tRead Misses:\t" + evaluator.coherenceReadMisses;
        eval += "\n\tWrite Misses:\t" + evaluator.coherenceWriteMisses;
        eval += "\nWritebacks:\t\t" + evaluator.cntWriteBacks;
        eval += "\nEntries to Invalid:\t" + evaluator.entriesToInvalid;
        eval += "\nReads from RAM:\t" + evaluator.cntReadsFromRam;
        eval += "\nMessages on Bus:\t" + evaluator.cntMessagesOnBus;
        eval += "\nWriteback Delay:\t" + evaluator.cntWriteBacks * UserChoices.wbDelay;
        SimulatorWindow.jTxtResult.setText(eval);
        SimulatorWindow.evaluator = new EvalParam();
    }

    public SimulatorWindow() {
        initComponents();
        evaluator = new EvalParam();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTxtScenario = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jTxtNumOps = new javax.swing.JTextField();
        jBtnGenRandom = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jBtnValidity = new javax.swing.JToggleButton();
        jBtnBegin = new javax.swing.JButton();
        jCmbProc = new javax.swing.JComboBox();
        jCmbOp = new javax.swing.JComboBox();
        jCmbBlock = new javax.swing.JComboBox();
        jTxtVal = new javax.swing.JTextField();
        jTxtNumProc = new javax.swing.JTextField();
        jTxtPerProcBlocks = new javax.swing.JTextField();
        jTxtNumBlockMainMemory = new javax.swing.JTextField();
        jTxtWriteBack = new javax.swing.JTextField();
        jCmbProtocol = new javax.swing.JComboBox();
        jBtnInsert = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTxtSequenceExec = new javax.swing.JTextArea();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTxtResult = new javax.swing.JTextArea();
        jLabel14 = new javax.swing.JLabel();
        jCmbDominant = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jBtnAnalyze = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cache Coherence SImulator");
        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Enter Number of Processors:");

        jLabel2.setText("Enter Number of blocks:");

        jLabel3.setText("Per Processor Cache:");

        jLabel4.setText("Main Memory:");

        jLabel5.setText("Enter Write Back Delay:");

        jLabel6.setText("Choose a Protocol to be used:");

        jTxtScenario.setColumns(20);
        jTxtScenario.setLineWrap(true);
        jTxtScenario.setRows(10);
        jScrollPane1.setViewportView(jTxtScenario);

        jLabel7.setText("Number of Operations:");

        jTxtNumOps.setText("1");
        jTxtNumOps.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtNumOpsFocusLost(evt);
            }
        });

        jBtnGenRandom.setText("Generate Random");
        jBtnGenRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGenRandomActionPerformed(evt);
            }
        });

        jLabel8.setText("Processor ID:");

        jLabel9.setText("Operation:");

        jLabel10.setText("Block ID:");

        jLabel11.setText("Value (if required):");

        jBtnValidity.setText("Verify Validity");
        jBtnValidity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnValidityActionPerformed(evt);
            }
        });

        jBtnBegin.setText("Begin Execution");
        jBtnBegin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBeginActionPerformed(evt);
            }
        });

        jCmbProc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "P-0", "P-1" }));

        jCmbOp.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Read", "Write" }));

        jCmbBlock.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "B-0", "B-1" }));

        jTxtVal.setText("0");
        jTxtVal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtValFocusLost(evt);
            }
        });

        jTxtNumProc.setText("2");
        jTxtNumProc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtNumProcFocusLost(evt);
            }
        });

        jTxtPerProcBlocks.setText("2");
        jTxtPerProcBlocks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtPerProcBlocksActionPerformed(evt);
            }
        });
        jTxtPerProcBlocks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtPerProcBlocksFocusLost(evt);
            }
        });

        jTxtNumBlockMainMemory.setText("2");
        jTxtNumBlockMainMemory.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtNumBlockMainMemoryFocusLost(evt);
            }
        });

        jTxtWriteBack.setText("1");
        jTxtWriteBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtWriteBackActionPerformed(evt);
            }
        });
        jTxtWriteBack.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtWriteBackFocusLost(evt);
            }
        });

        jCmbProtocol.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MSI", "MOSI", "MESI", "MERSI", "DRAGON", "FIREFLY" }));
        jCmbProtocol.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jCmbProtocolFocusLost(evt);
            }
        });

        jBtnInsert.setText("Insert ->");
        jBtnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnInsertActionPerformed(evt);
            }
        });

        jLabel12.setText("Sequence Execution");

        jTxtSequenceExec.setColumns(20);
        jTxtSequenceExec.setLineWrap(true);
        jTxtSequenceExec.setRows(5);
        jScrollPane2.setViewportView(jTxtSequenceExec);

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel13.setText("Experimental Results");

        jTxtResult.setColumns(20);
        jTxtResult.setLineWrap(true);
        jTxtResult.setRows(5);
        jScrollPane3.setViewportView(jTxtResult);

        jLabel14.setText("Generated Sequence");

        jCmbDominant.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Write", "Read", "Neutral" }));

        jLabel15.setText("Dominance:");

        jBtnAnalyze.setText("Analyse Scenario");
        jBtnAnalyze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAnalyzeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator4)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(38, 72, Short.MAX_VALUE)
                                        .addComponent(jLabel7)
                                        .addGap(114, 114, 114))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(38, 38, 38)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel8)
                                                    .addComponent(jLabel9)
                                                    .addComponent(jLabel10)
                                                    .addComponent(jLabel11)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(21, 21, 21)
                                                .addComponent(jBtnValidity)
                                                .addGap(45, 45, 45)
                                                .addComponent(jBtnAnalyze)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jCmbProc, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jCmbOp, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTxtVal, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jCmbBlock, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTxtNumOps, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(7, 7, 7)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel15)
                                            .addComponent(jBtnInsert)))
                                    .addComponent(jBtnBegin, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jCmbDominant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(54, 54, 54)
                                    .addComponent(jBtnGenRandom, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(417, 417, 417))
                                .addComponent(jScrollPane1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGap(248, 248, 248))))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(122, 122, 122)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTxtNumProc)
                            .addComponent(jTxtWriteBack)
                            .addComponent(jCmbProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jTxtPerProcBlocks, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jTxtNumBlockMainMemory, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(196, 196, 196)
                                .addComponent(jLabel12))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel13)
                                .addGap(257, 257, 257))))
                    .addComponent(jSeparator3))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxtNumProc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jTxtPerProcBlocks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxtNumBlockMainMemory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTxtWriteBack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jCmbProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCmbDominant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addComponent(jBtnGenRandom))
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jTxtNumOps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jCmbProc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCmbOp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCmbBlock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTxtVal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jBtnInsert, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBtnValidity)
                            .addComponent(jBtnBegin)
                            .addComponent(jBtnAnalyze))
                        .addGap(13, 13, 13)))
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTxtPerProcBlocksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtPerProcBlocksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtPerProcBlocksActionPerformed
    public static void setControllerState(boolean flag) {// this function is used to enable or disable all the frame works in the simulator
        jTxtNumBlockMainMemory.setEnabled(flag);
        jBtnAnalyze.setEnabled(flag);
        jTxtNumOps.setEnabled(flag);
        jTxtNumProc.setEnabled(flag);
        jTxtPerProcBlocks.setEnabled(flag);
        jTxtResult.setEnabled(flag);
        jTxtScenario.setEnabled(flag);
        jTxtVal.setEnabled(flag);
        jTxtWriteBack.setEnabled(flag);
        jCmbBlock.setEnabled(flag);
        jCmbOp.setEnabled(flag);
        jCmbProc.setEnabled(flag);
        jCmbProtocol.setEnabled(flag);
        jBtnBegin.setEnabled(flag);
        jBtnInsert.setEnabled(flag);
        jBtnValidity.setEnabled(flag);
        jBtnGenRandom.setEnabled(flag);
        jCmbDominant.setEnabled(flag);

    }
    private void jTxtNumProcFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtNumProcFocusLost
        // TODO add your handling code here:

        String numProc = jTxtNumProc.getText(); // gets the number of processors entered in the text field
        try {
            UserChoices.numberOfProcessors = Integer.parseInt(numProc);// convert the string to integer and sets the number of processors as two
            if (UserChoices.numberOfProcessors < 2) {// checks if the number of processors entered is more than or equal to two
                JOptionPane.showMessageDialog(null, "You need at least 2 processors!", "Validation", JOptionPane.INFORMATION_MESSAGE);// if above condition is true then error meaage will be displayed
                jTxtNumProc.setText("2");// the deafult number of processors when above condition is true is two
                UserChoices.numberOfProcessors = 2;//sets the number of processors as two in userchoice class
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Incorrect Value Entered!", "Validation", JOptionPane.INFORMATION_MESSAGE);//if there is any exception occured in the above try block then error message will be displayed
            jTxtNumProc.setText("2");// the deafult number of processors that will be set in the text field will be two
            UserChoices.numberOfProcessors = 2;// sets the number of processor as two in userchoice class
        }
        SimulatorWindow.updateNumberOfProcessors(UserChoices.numberOfProcessors);// update the number of processor entered in the text field to the comb box to select the processor
    }//GEN-LAST:event_jTxtNumProcFocusLost
    public static void updateNumberOfProcessors(int numProc) {
        SimulatorWindow.jCmbProc.removeAllItems();//clear the items in the combo box
        for (int i = 0; i < numProc; i++) {
            SimulatorWindow.jCmbProc.addItem("P-" + i);// add the entered number of processors in the combo box
        }
    }
    private void jTxtPerProcBlocksFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtPerProcBlocksFocusLost
        // TODO add your handling code here:
        String temp = jTxtPerProcBlocks.getText();//get the number of blocks(local cache) entered in the text field of the simulator
        try {
            UserChoices.numberOfBlocksLocal = Integer.parseInt(temp);// convert the number of blocks entered in text field from string to integer and sets to number of blocks in userchoice class

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Incorrect Value Entered!", "Validation", JOptionPane.INFORMATION_MESSAGE);// when exception occured in the abive try block the eroor message will be diaplyed
            jTxtPerProcBlocks.setText("2");// sets the default number of blocks when exception occured
            UserChoices.numberOfBlocksLocal = 2;
        }
    }//GEN-LAST:event_jTxtPerProcBlocksFocusLost

    private void jTxtNumBlockMainMemoryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtNumBlockMainMemoryFocusLost
        // TODO add your handling code here
        String temp = jTxtNumBlockMainMemory.getText();// number of blocks in main memory
        try {
            UserChoices.numberOfBlocksMain = Integer.parseInt(temp); // sets the number of blocks in main memory

        } catch (Exception e) {// 
            JOptionPane.showMessageDialog(null, "Incorrect Value Entered!", "Validation", JOptionPane.INFORMATION_MESSAGE);
            jTxtNumBlockMainMemory.setText("2");// sets the default number of blocks in main memory when the exception occured
            UserChoices.numberOfBlocksMain = 2;
        }
        SimulatorWindow.updateNumberOfBlocks(UserChoices.numberOfBlocksMain);// update the number of blocks in main memory to combo box to select the block from the main memory
    }//GEN-LAST:event_jTxtNumBlockMainMemoryFocusLost
    public static void updateNumberOfBlocks(int numBlocks) {
        SimulatorWindow.jCmbBlock.removeAllItems();// clear the iteams from the combo box
        for (int i = 0; i < numBlocks; i++) {
            SimulatorWindow.jCmbBlock.addItem("B-" + i);// add the entered number of blocks in the combo box
        }
    }
    private void jTxtWriteBackFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtWriteBackFocusLost
        // TODO add your handling code here:
        String temp = jTxtWriteBack.getText();// get the writeback delay
        try {
            UserChoices.wbDelay = Double.parseDouble(temp);// sets the write back dealay to userchoice class

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Incorrect Value Entered!", "Validation", JOptionPane.INFORMATION_MESSAGE);
            jTxtWriteBack.setText("0");// sets the default wrtieback when the exception occured
            UserChoices.wbDelay = 0;

        }
    }//GEN-LAST:event_jTxtWriteBackFocusLost

    private void jTxtNumOpsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtNumOpsFocusLost
        // TODO add your handling code here:
        String temp = jTxtNumOps.getText();// get the number of operation that has to be performed
        try {
            int x = Integer.parseInt(temp);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Incorrect Value Entered!", "Validation", JOptionPane.INFORMATION_MESSAGE);
            jTxtNumOps.setText("1");// sets the default number of operation when the exception occured

        }
    }//GEN-LAST:event_jTxtNumOpsFocusLost

    private void jTxtValFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtValFocusLost
        // TODO add your handling code here:
        String temp = jTxtVal.getText();// get the value that has to be written to the block when the write operation is selected
        try {
            int x = Integer.parseInt(temp);// coveret the value from string to integer
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Incorrect Value Entered!", "Validation", JOptionPane.INFORMATION_MESSAGE);
            jTxtVal.setText("0");// sets the default value when the exception occured

        }
    }//GEN-LAST:event_jTxtValFocusLost

    private void jCmbProtocolFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbProtocolFocusLost
        // TODO add your handling code here:
        switch (jCmbProtocol.getSelectedIndex()) {// selects the protocol that has been selected by the user
            case 0:
                UserChoices.protocol = ProtocolEnum.MSI;// sets the userchioce protocl to MSI when MSI is selected
                break;
            case 1:
                UserChoices.protocol = ProtocolEnum.MOSI;// sets the userchioce protocl to MOSI when MOSI is selected
                break;
            case 2:
                UserChoices.protocol = ProtocolEnum.MESI;// sets the userchioce protocl to MESI when MESI is selected
                break;
            case 3:
                UserChoices.protocol = ProtocolEnum.MERSI;// sets the userchioce protocl to MERSI when MERSI is selected
                break;
            case 4:
                UserChoices.protocol = ProtocolEnum.DRAGON;// sets the userchioce protocl to DRAGON when DRAGON is selected
                break;
            case 5:
                UserChoices.protocol = ProtocolEnum.FIREFLY;// sets the userchioce protocl to FIREFLY when FIREFLY is selected
                break;

        }


    }//GEN-LAST:event_jCmbProtocolFocusLost

    private void jBtnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnInsertActionPerformed
        // TODO add your handling code here:
        String seq = "";// the sequence is set to null 
        seq = seq + jCmbProc.getSelectedItem() + ":" + jCmbBlock.getSelectedItem() + ":";// add the processor number and the block number to teh sequence
        if (jCmbOp.getSelectedIndex() == 0) {// checks if the read operation is selected or write operation
            seq += "R";// add read operation to the sequence
        } else {
            seq = seq + "W:" + jTxtVal.getText();// add write operation to the sequence along with the value that has to be written
        }

        String temp = jTxtScenario.getText(); 
        if (temp.length() == 0) {
            jTxtScenario.setText(seq);// enter the generated sequence to the text field
        } else {
            jTxtScenario.setText(temp + "," + seq);// enter the set of opeartion which will be separated by comma operator to the tex field
        }
    }//GEN-LAST:event_jBtnInsertActionPerformed

    private void jBtnValidityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnValidityActionPerformed
        // TODO add your handling code here:
        String msg = "";
        if ((msg = SimulatorWindow.isScenarioValid(jTxtScenario.getText())).equals("YES")) {// checks if the the generated sequence is in the valid format
            JOptionPane.showMessageDialog(null, "Scenario is valid!\nGo ahead with exection.", "Validation", JOptionPane.INFORMATION_MESSAGE);

        } else {
            JOptionPane.showMessageDialog(null, "Invalid Scneario!\nError:" + msg, "Validation", JOptionPane.INFORMATION_MESSAGE);

        }
    }//GEN-LAST:event_jBtnValidityActionPerformed

    private void jBtnBeginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBeginActionPerformed
        String msg = "";
        if ((msg = isScenarioValid(jTxtScenario.getText())).equals("YES")) {// checks if the set of opertion is valid
            ThreadRunner tr = new ThreadRunner(jTxtScenario.getText());// beings the excutions
            tr.start();
        } else {
            JOptionPane.showMessageDialog(null, "Invalid Scneario!\nError:" + msg, "Validation", JOptionPane.INFORMATION_MESSAGE);// error meassage when the sequence is not in valid format

        }
    }//GEN-LAST:event_jBtnBeginActionPerformed

    private void jTxtWriteBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtWriteBackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtWriteBackActionPerformed

    private void jBtnGenRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGenRandomActionPerformed
        double writeThreshold = 0.5;
        if (jCmbDominant.getSelectedIndex() == 0) {// checks if wrtie dominant is selected or read dominant
            writeThreshold = 0.8;// if write dominant is selected 
        } else if (jCmbDominant.getSelectedIndex() == 1) {
            writeThreshold = 0.2;
        } else {

        }
        int proc = Integer.parseInt(jTxtNumProc.getText());// get the number of processor entered
        int ramBlocks = Integer.parseInt(jTxtNumBlockMainMemory.getText());// get the number of block for main memory entered 
        String seq = "";
        for (int i = 0; i < Integer.parseInt(jTxtNumOps.getText()); i++) {// loop runs for number of operation that has been selected

            int selctedProc = SimulatorWindow.selectBasedOnRandom(proc, Math.random());// gets the random number for the processor
            int selectedBlock = SimulatorWindow.selectBasedOnRandom(ramBlocks, Math.random());// gets the random number for the blocks in the local cache
            //  System.out.println("!!-"+i);
            seq += "P-" + selctedProc + ":B-" + selectedBlock + ":";// add the random number of processor and the random number of block to the sequence
            if (Math.random() > writeThreshold) {//based upon the generated random number either read operation or write operation will be selected
                seq += "R";// add read operation to the sequence
            } else {
                seq += "W:" + Math.round(Math.random() * 100);// add the write operation and the value to the sequence
            }
            if (i < Integer.parseInt(jTxtNumOps.getText()) - 1) {// checks the number of operation still remaining
                seq += ",";
            }
        }
        SimulatorWindow.jTxtScenario.setText(seq);// set the generated random sequence to the text field

    }//GEN-LAST:event_jBtnGenRandomActionPerformed

    private void jBtnAnalyzeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAnalyzeActionPerformed
        // TODO add your handling code here:
        double numberOfOps = 0, numberOfReads = 0, numberOfWrites = 0;
        double distRead=0,distWrite=0,totalReadDist=0,totalWriteDist=0;
        String scenario = SimulatorWindow.jTxtScenario.getText();// gets the sequence entered in the text field
        String[] ops = scenario.split(",");// splits the each operation from the sequence and add each opeartion to the "ops" array
        for (String op : ops) {
            String[] details = op.split(":");// splits each operation into processor number, block number and the operation
            numberOfOps++;
            if (details[2].equals("W")) {
                numberOfWrites++;// increment the number of write operation when write opeartion is selected
                totalWriteDist+=distWrite;
                distWrite=0;
            } else {
                numberOfReads++;// increment the number of read operation when read opeartion is selected
                totalReadDist+=distRead;
                distRead=0;
            }
            distRead++;
            distWrite++;
        }
        JOptionPane.showMessageDialog(null,  "Total Operations:_______"+numberOfOps// display the number of opration performed
                                           + "\nTotal Reads:___________"+numberOfReads+""// number of read opeartion performed
                                            +"\nTotal Writes:___________"+numberOfWrites// number of write operation performed
                                           + "\nReads per Block:_______"+(double)(numberOfReads/UserChoices.numberOfBlocksMain)// number of read operation per block
                                           + "\nWrites per Block:_______"+(double)(numberOfWrites/UserChoices.numberOfBlocksMain)// number of write operation per block
                                           + "\nDistance per Write:_____"+(double)(totalWriteDist/numberOfWrites)// number of operation taken between two write opeartion
                                           + "\nDistance per Read:_____"+(double)(totalReadDist/numberOfReads), "Analysis", JOptionPane.INFORMATION_MESSAGE);// number of operation performed between the two read operation
    }//GEN-LAST:event_jBtnAnalyzeActionPerformed
    public static int selectBasedOnRandom(int cnt, double selector) {// used to get the random processor number and block number for generating random sequence
        //System.out.println("Count="+cnt+" Selector="+selector);
        double tempCounter = (double) ((double) 1 / (double) cnt);
        double temp = tempCounter;
        int x = 0;
        while (selector > tempCounter && tempCounter <= 1) {
            x++;
            tempCounter += temp;
        }
        return x;
    }

    public static void updateSequenceExecutionStatus() {// display the status of blocks in the main memory
        //  System.out.println("!!!!!!");
        String status = "Main Memory = {";
        for (int i = 0; i < Exec.ram.numberOfBlocks; i++) {
            if (i != Exec.ram.numberOfBlocks - 1) {
                status += " " + Exec.ram.values[i] + ",";
            } else {
                status += " " + Exec.ram.values[i] + "}\n";
            }
        }
        status += "------------------------------------------------------------------------------------------------------------\n";

        for (int i = 0; i < Exec.processors.length; i++) {// displays the status of the block and also the state of the block for each processor
            status += "P-" + i + ":{";
            for (int j = 0; j < Exec.processors[i].localCache.length; j++) {
                if (Exec.processors[i].localCache[j].isOccupied) {
                    status += "B-" + Exec.processors[i].localCache[j].blockID + ":" + Exec.processors[i].localCache[j].value + "(" + Exec.processors[i].localCache[j].blockState + "),";
                }
            }
            status += " }\n";
        }
        status += "------------------------------------------------------------------------------------------------------------\n";
        SimulatorWindow.jTxtSequenceExec.setText(status);
    }

    public static String isScenarioValid(String scenario) {// checks if the sequence in the text field is valid or not

        if (scenario.length() == 0) { // if no sequence is entered
            return "Empty Scenario.";
        }
        if (scenario.length() < 8) {// the entered sequence is not in valid format
            return "Incomplete Scenario.";
        }
        String[] allOps = scenario.split(",");// splits the each operation from the sequence and add the set of operation to "allops" array
        for (String op : allOps) {
            if (op.length() < 8) { 
                return "Incomplete Scenario.";
            }
            String[] tempArr = op.split(":");// splits each operation into processor number, block number , operation and the value if present
            //processor id validation
            if (tempArr[0].charAt(0) != 'P' || tempArr[0].charAt(1) != '-') {
                return "Invalid Processor:" + tempArr[0];
            }

            if (!SimulatorWindow.isInt(tempArr[0].split("-")[1])) {
                return "Invalid Processor:" + tempArr[0];
            }

            if (Integer.parseInt(tempArr[0].split("-")[1]) < 0 || Integer.parseInt(tempArr[0].split("-")[1]) >= UserChoices.numberOfProcessors) {
                return "Invalid Processor:" + tempArr[0];
            }
            //block id validation
            if (tempArr[1].charAt(0) != 'B' || tempArr[1].charAt(1) != '-') {
                return "Invalid Block:" + tempArr[1];
            }

            if (!SimulatorWindow.isInt(tempArr[1].split("-")[1])) {
                return "Invalid Block:" + tempArr[1];
            }

            if (Integer.parseInt(tempArr[1].split("-")[1]) < 0 || Integer.parseInt(tempArr[1].split("-")[1]) >= UserChoices.numberOfBlocksMain) {
                return "Invalid Block:" + tempArr[0];
            }
            //Op validation
            //System.out.println(""+tempArr[2]);
            if (!tempArr[2].equals("R") && !tempArr[2].equals("W")) {
                return "Invalid Operation:" + tempArr[2];
            }
            //val validation
            if (tempArr[2].equals("W")) {
                if (tempArr.length < 4) {
                    return "Missing write value.";
                } else if (tempArr[3] == null) {
                    return "Missing write value.";
                } else if (tempArr[3].length() == 0) {
                    return "Missing write value.";
                } else if (!SimulatorWindow.isDouble(tempArr[3])) {
                    return "Incorrect write value:" + tempArr[3];
                }
            }
        }
        return "YES";
    }

    public static boolean isInt(String temp) {
        try {
            int x = Integer.parseInt(temp);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public static boolean isDouble(String temp) {
        try {
            double x = Double.parseDouble(temp);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimulatorWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimulatorWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimulatorWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimulatorWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SimulatorWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton jBtnAnalyze;
    public static javax.swing.JButton jBtnBegin;
    public static javax.swing.JButton jBtnGenRandom;
    public static javax.swing.JButton jBtnInsert;
    public static javax.swing.JToggleButton jBtnValidity;
    public static javax.swing.JComboBox jCmbBlock;
    public static javax.swing.JComboBox jCmbDominant;
    public static javax.swing.JComboBox jCmbOp;
    public static javax.swing.JComboBox jCmbProc;
    public static javax.swing.JComboBox jCmbProtocol;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    public static javax.swing.JTextField jTxtNumBlockMainMemory;
    public static javax.swing.JTextField jTxtNumOps;
    public static javax.swing.JTextField jTxtNumProc;
    public static javax.swing.JTextField jTxtPerProcBlocks;
    public static javax.swing.JTextArea jTxtResult;
    public static javax.swing.JTextArea jTxtScenario;
    public static javax.swing.JTextArea jTxtSequenceExec;
    public static javax.swing.JTextField jTxtVal;
    public static javax.swing.JTextField jTxtWriteBack;
    // End of variables declaration//GEN-END:variables
}
